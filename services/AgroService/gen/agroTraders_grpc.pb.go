// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: agroTraders.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgroTradersService_GetProduct_FullMethodName   = "/dhareja.agroTraders.AgroTradersService/GetProduct"
	AgroTradersService_ListProducts_FullMethodName = "/dhareja.agroTraders.AgroTradersService/ListProducts"
)

// AgroTradersServiceClient is the client API for AgroTradersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgroTradersServiceClient interface {
	GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Product, error)
	ListProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductList, error)
}

type agroTradersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgroTradersServiceClient(cc grpc.ClientConnInterface) AgroTradersServiceClient {
	return &agroTradersServiceClient{cc}
}

func (c *agroTradersServiceClient) GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, AgroTradersService_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agroTradersServiceClient) ListProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductList)
	err := c.cc.Invoke(ctx, AgroTradersService_ListProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgroTradersServiceServer is the server API for AgroTradersService service.
// All implementations must embed UnimplementedAgroTradersServiceServer
// for forward compatibility.
type AgroTradersServiceServer interface {
	GetProduct(context.Context, *ProductRequest) (*Product, error)
	ListProducts(context.Context, *Empty) (*ProductList, error)
	mustEmbedUnimplementedAgroTradersServiceServer()
}

// UnimplementedAgroTradersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgroTradersServiceServer struct{}

func (UnimplementedAgroTradersServiceServer) GetProduct(context.Context, *ProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedAgroTradersServiceServer) ListProducts(context.Context, *Empty) (*ProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedAgroTradersServiceServer) mustEmbedUnimplementedAgroTradersServiceServer() {}
func (UnimplementedAgroTradersServiceServer) testEmbeddedByValue()                            {}

// UnsafeAgroTradersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgroTradersServiceServer will
// result in compilation errors.
type UnsafeAgroTradersServiceServer interface {
	mustEmbedUnimplementedAgroTradersServiceServer()
}

func RegisterAgroTradersServiceServer(s grpc.ServiceRegistrar, srv AgroTradersServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgroTradersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgroTradersService_ServiceDesc, srv)
}

func _AgroTradersService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgroTradersServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgroTradersService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgroTradersServiceServer).GetProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgroTradersService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgroTradersServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgroTradersService_ListProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgroTradersServiceServer).ListProducts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AgroTradersService_ServiceDesc is the grpc.ServiceDesc for AgroTradersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgroTradersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dhareja.agroTraders.AgroTradersService",
	HandlerType: (*AgroTradersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _AgroTradersService_GetProduct_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _AgroTradersService_ListProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agroTraders.proto",
}
